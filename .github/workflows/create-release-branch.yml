name: Create environment PR

on:
  workflow_dispatch:
    inputs:
      direction:
        description: Promotion direction
        required: true
        type: choice
        options: [develop-to-stage, stage-to-master]
      pr_title:
        description: PR title
        required: true
        type: string
      pr_body:
        description: Optional description
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write

env:
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}

jobs:
  create_env_pr:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # 1 – set source/target branches
    - name: Derive branches
      id: branches
      shell: bash
      run: |
        case "${{ github.event.inputs.direction }}" in
          develop-to-stage)
            echo "src=develop"  >>"$GITHUB_OUTPUT"
            echo "dst=stage"    >>"$GITHUB_OUTPUT"
            echo "label=Develop → Stage" >>"$GITHUB_OUTPUT" ;;
          stage-to-master)
            echo "src=stage"    >>"$GITHUB_OUTPUT"
            echo "dst=master"   >>"$GITHUB_OUTPUT"
            echo "label=Stage → Master"  >>"$GITHUB_OUTPUT" ;;
        esac

    # 2 – build body
    - name: Compose body
      id: prdesc
      shell: bash
      run: |
        WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
          DESC="${{ github.event.inputs.pr_body }}\n\n—\nCreated via workflow run: ${WF_URL}"
        else
          DESC="Automatically created PR.\nWorkflow run → ${WF_URL}"
        fi
        printf 'desc<<EOF\n%s\nEOF\n' "$DESC" >>"$GITHUB_OUTPUT"

    # 3 – create or reuse PR, add “automated‑pr” label
    - name: Create or reuse PR
      id: pr
      shell: bash
      run: |
        src=${{ steps.branches.outputs.src }}
        dst=${{ steps.branches.outputs.dst }}
        TITLE="${{ github.event.inputs.pr_title }}"
        BODY="${{ steps.prdesc.outputs.desc }}"

        url=$(gh pr list --state open --head "$src" --base "$dst" \
                         --json url --jq '.[0].url' || true)

        if [[ -z $url ]]; then
          url=$(gh pr create --head "$src" --base "$dst" \
                              --title "$TITLE" --body "$BODY" | tail -n1 | tr -d '\r\n')
        else
          url=$(echo "$url" | tr -d '\r\n')
        fi

        num=${url##*/}
        gh pr edit "$num" --add-label "automated-pr" || true

        echo "url=$url"   >>"$GITHUB_OUTPUT"
        echo "number=$num" >>"$GITHUB_OUTPUT"

        # Add reviewers (non‑bot commit authors)
        commits=$(gh api repos/${{ github.repository }}/pulls/$num/commits)
        revs=$(jq -r '.[] | .author.login' <<<"$commits" |
               grep -v -E '(^github-actions\[bot\]$|^$)' | sort -u | paste -sd, -)
        [[ -n $revs ]] && gh pr edit "$num" --add-reviewer "$revs" || true

    # 4 – actor email
    - name: Resolve actor
      id: actor
      shell: bash
      run: |
        mail=$(gh api users/${{ github.actor }} --jq .email 2>/dev/null || true)
        [[ -z $mail || $mail == "null" ]] && mail="${{ github.actor }}"
        echo "mail=$mail" >>"$GITHUB_OUTPUT"

    # 5 – Slack ping
    - name: Notify Slack
      shell: bash
      run: |
        jq -n \
          --arg event "create_env_pr" \
          --arg title "${{ steps.branches.outputs.label }} PR created" \
          --arg body  "PR link: ${{ steps.pr.outputs.url }}" \
          --arg actor "${{ steps.actor.outputs.mail }}" \
          '{event,title,body,actor}' |
        curl -s -X POST -H 'Content-Type: application/json' --data @- "$SLACK_WEBHOOK_URL"
