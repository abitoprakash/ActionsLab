name: "Post-release automation"

on:
  release:
    types: [released]

permissions:
  contents: write
  pull-requests: write

env:
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}

jobs:
  post_release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - name: Generate notes if missing
      shell: bash
      run: |
        tag=${{ github.event.release.tag_name }}
        body=$(gh release view "$tag" --json body --jq .body)
        [[ -n $body ]] || gh release edit "$tag" --generate-notes

    - name: Helper – create or reuse PR
      shell: bash
      run: |
        cat >create_or_reuse_pr.sh <<'SH'
        #!/usr/bin/env bash
        set -euo pipefail
        head=$1 base=$2 title=$3 body=$4
        url=$(gh pr list --state open --head "$head" --base "$base" \
                         --json url --jq '.[0].url' || true)
        [[ -z $url ]] && url=$(gh pr create --head "$head" --base "$base" \
                                        --title "$title" --body "$body" | tail -n1)
        gh pr edit "${url##*/}" --add-label "automated-pr"
        echo "$url"
        SH
        chmod +x create_or_reuse_pr.sh

    - name: PR master→stage
      id: pr_master_stage
      shell: bash
      run: |
        tag=${{ github.event.release.tag_name }}
        url=$(./create_or_reuse_pr.sh master stage \
              "Sync master to stage after $tag" \
              "Automated sync PR after $tag.")
        echo "url=$url" >>"$GITHUB_OUTPUT"

    - name: PR stage→develop
      id: pr_stage_develop
      shell: bash
      run: |
        tag=${{ github.event.release.tag_name }}
        upstream=${{ steps.pr_master_stage.outputs.url }}
        url=$(./create_or_reuse_pr.sh stage develop \
              "Sync stage to develop after $tag" \
              "Please merge the master→stage PR first:\n${upstream}")
        echo "url=$url" >>"$GITHUB_OUTPUT"

    - name: Resolve actor email
      id: actor_email
      shell: bash
      run: |
        mail=$(gh api users/${{ github.actor }} --jq '.email' 2>/dev/null || true)
        [[ -z $mail || $mail == "null" ]] && mail="${{ github.actor }}"
        echo "mail=$mail" >>"$GITHUB_OUTPUT"

    - name: Notify Slack
      shell: bash
      run: |
        jq -n \
          --arg event "post_release" \
          --arg title "Release ${{ github.event.release.tag_name }} published" \
          --arg body  "Release notes: ${{ github.event.release.html_url }}" \
          --arg actor "${{ steps.actor_email.outputs.mail }}" \
          --arg postReleaseStagePR   "${{ steps.pr_master_stage.outputs.url }}" \
          --arg postReleaseDevelopPR "${{ steps.pr_stage_develop.outputs.url }}" \
          '{event,title,body,actor,postReleaseStagePR,postReleaseDevelopPR}' |
        curl -s -X POST -H 'Content-Type: application/json' --data @- "$SLACK_WEBHOOK_URL"
