name: "Create environment PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      direction:
        description: "Select release PR type"
        required: true
        type: choice
        options:
          - develop-to-stage
          - stage-to-master
      pr_title:
        description: "Pull‑request title"
        required: true
        type: string
      pr_body:
        description: "Optional PR description"
        required: false
        type: string

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_environment_pr:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 1️⃣  Determine source/target branches and label text
    - name: Set branch variables
      id: branches
      run: |
        case "${{ github.event.inputs.direction }}" in
          develop-to-stage)
            SRC=develop
            DST=stage
            LABEL="Develop -> Stage"
            ;;
          stage-to-master)
            SRC=stage
            DST=master
            LABEL="Stage -> Master"
            ;;
          *)
            echo "Unsupported direction"; exit 1
            ;;
        esac
        echo "src=$SRC"    >>"$GITHUB_OUTPUT"
        echo "dst=$DST"    >>"$GITHUB_OUTPUT"
        echo "label=$LABEL">>"$GITHUB_OUTPUT"

    # 2️⃣  Build PR description (append workflow‑run link)
    - name: Compose PR description
      id: prdesc
      shell: bash
      run: |
        WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
          DESC="${{ github.event.inputs.pr_body }}\n\n—\nCreated via workflow run: ${WF_URL}"
        else
          DESC="Automatically created PR.\nWorkflow run → ${WF_URL}"
        fi
        {
          echo 'text<<EOF'
          echo -e "$DESC"
          echo EOF
        } >>"$GITHUB_OUTPUT"

    # 3️⃣  Create the PR
    - name: Create pull request
      id: pr
      shell: bash
      run: |
        PR_URL=$(gh pr create \
                   --head "${{ steps.branches.outputs.src }}" \
                   --base "${{ steps.branches.outputs.dst }}" \
                   --title "${{ github.event.inputs.pr_title }}" \
                   --body  "${{ steps.prdesc.outputs.text }}" | tail -n1)
        echo "url=$PR_URL"           >>"$GITHUB_OUTPUT"
        echo "number=${PR_URL##*/}"  >>"$GITHUB_OUTPUT"

    # 4️⃣  Add commit authors (GitHub logins) as reviewers
    - name: Add reviewers
      shell: bash
      run: |
        COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
        LOGINS=$(jq -r '.[] | .author.login' <<<"$COMMITS" | grep -v null | sort -u | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$LOGINS" ]]; then
          gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$LOGINS"
        fi

    # 5️⃣  Determine actor e‑mail or fallback to login
    - name: Resolve actor identity
      id: actor
      shell: bash
      run: |
        EMAIL=$(gh api users/${{ github.actor }} --jq '.email' 2>/dev/null || echo "")
        [[ -z "$EMAIL" || "$EMAIL" == "null" ]] && EMAIL="${{ github.actor }}"
        echo "name=$EMAIL" >>"$GITHUB_OUTPUT"

    # 6️⃣  Notify Slack (plain‑text fields)
    - name: Notify Slack
      shell: bash
      run: |
        title="${{ steps.branches.outputs.label }} PR #${{ steps.pr.outputs.number }} created"
        body="PR link: ${{ steps.pr.outputs.url }}"
        actor="${{ steps.actor.outputs.name }}"

        jq -n \
          --arg title "$title" \
          --arg body  "$body" \
          --arg actor "$actor" \
          '{title:$title,body:$body,actor:$actor}' |
        curl -s -X POST -H 'Content-Type: application/json' \
             --data @- "$SLACK_WEBHOOK_URL"
