name: "ðŸ“¦ Release to Stage"
on:
  workflow_dispatch:
    inputs:
      title:
        description: 'PR title'
        required: true
      description:
        description: 'PR description (Confluence link, notesâ€¦)'
        required: false

permissions:
  contents: write        # allow creating PRs via GraphQL/REST
  pull-requests: write   # allow pull-request operations

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Create developâ†’stage PR via gh CLI
        id: gh_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TITLE:    "${{ github.event.inputs.title }}"
          BODY:     "${{ github.event.inputs.description }}"
        run: |
          set -e
          pr_url=$(gh pr create \
            --head develop \
            --base stage \
            --title "$TITLE" \
            --body "$BODY")
          echo "pr_url=$pr_url" >> $GITHUB_OUTPUT
          pr_number=${pr_url##*/}
          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT

      - name: Get PR commit emails
        id: authors
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const n = Number('${{ steps.gh_pr.outputs.pr_number }}');
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: n
            });
            return [...new Set(commits.map(c => c.commit.author.email))];

      - name: Map to Slack IDs
        id: slack_ids
        run: |
          map="$(cat .github/slack-map.json)"
          mentions=()
          for email in ${{ steps.authors.outputs.result }}; do
            id=$(jq -r --arg e "$email" '.[$e] // empty' <<<"$map")
            if [[ -n "$id" ]]; then
              mentions+=( "<@$id>" )
            else
              mentions+=( "$email" )
            fi
          done
          echo "ids=${mentions[*]}" >> $GITHUB_OUTPUT

      - name: Notify Slack via Workflow
        if: steps.gh_pr.outputs.pr_number
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
          EVENT:        "Release to Stage"
          TITLE:        "${{ github.event.inputs.title }}"
          MESSAGE:      |
                          â€¢ PR: <${{ steps.gh_pr.outputs.pr_url }}|View on GitHub>
                          â€¢ Description: ${{ github.event.inputs.description || 'â€“ none â€“' }}
          MENTIONS:     ${{ steps.slack_ids.outputs.ids }}
        run: |
          jq -n \
            --arg event    "$EVENT" \
            --arg title    "$TITLE" \
            --arg message  "$MESSAGE" \
            --arg mentions "$MENTIONS" \
            '{event: $event, title: $title, message: $message, mentions: $mentions}' \
          | curl -X POST -H "Content-Type: application/json" \
                 --data @- \
                 "$SLACK_WEBHOOK"
