name: "Create develop -> Stage PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: "Pull‚Äërequest title"
        required: true
        type: string
      pr_body:
        description: "Pull‚Äërequest description (optional)"
        required: false
        type: string

env:
  SLACK_RELEASE_WORKFLOW_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:                    ${{ secrets.GITHUB_TOKEN }}

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£¬†Check out repo (contains slack-user-map.json)
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2Ô∏è‚É£¬†Build PR description (add workflow‚Äërun link)
      - name: Compose PR description
        id: desc
        run: |
          WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
            DESC="${{ github.event.inputs.pr_body }}\n\n‚Äî\nGenerated by workflow: ${WF_URL}"
          else
            DESC="Automatically generated PR.\nWorkflow run ‚Üí ${WF_URL}"
          fi
          printf '%s' "$DESC" | sed -e 's/%/%25/g' -e 's/\n/%0A/g' \
                                     -e 's/\r/%0D/g' >>"$GITHUB_OUTPUT"

      # 3Ô∏è‚É£¬†Create the PR (develop ‚Üí stage) and capture URL / number
      - name: Open pull request
        id: pr
        run: |
          PR_URL=$(gh pr create \
                     --head develop --base stage \
                     --title "${{ github.event.inputs.pr_title }}" \
                     --body  "${{ steps.desc.outputs.* }}" | tail -n1)
          echo "url=$PR_URL"        >>"$GITHUB_OUTPUT"
          echo "number=${PR_URL##*/}" >>"$GITHUB_OUTPUT"

      # 4Ô∏è‚É£¬†Collect commit authors
      - name: Gather commit authors
        id: authors
        run: |
          COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
          IDS=$(jq -r '.[] | .author.login?, .commit.author.email?' <<<"$COMMITS" | grep -v null | sort -u)
          echo "all=$(echo "$IDS" | tr '\n' ',' | sed 's/,$//')" >>"$GITHUB_OUTPUT"

      # 5Ô∏è‚É£¬†Map to Slack IDs + request reviewers
      - name: Map mentions & request reviewers
        id: mentions
        run: |
          mapfile -t ARR < <(echo "${{ steps.authors.outputs.all }}" | tr ',' '\n')

          declare -a SLACK_IDS
          declare -a GH_REVIEWERS

          for IDENT in "${ARR[@]}"; do
            [[ "$IDENT" != *"@"* ]] && GH_REVIEWERS+=("$IDENT")

            S_ID=$(jq -r --arg k "$IDENT" '.[ $k ] // empty' .github/slack-user-map.json || true)
            if [[ -n "$S_ID" ]]; then
              SLACK_IDS+=("<@$S_ID>")
            elif [[ "$IDENT" == *"@"* ]]; then
              SLACK_IDS+=("$(cut -d@ -f1 <<<"$IDENT")")
            else
              SLACK_IDS+=("$IDENT")
            fi
          done

          [[ ${#GH_REVIEWERS[@]} -gt 0 ]] && \
            gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$(IFS=','; echo "${GH_REVIEWERS[*]}")"

          echo "list=$(IFS=' '; echo "${SLACK_IDS[*]}")" >>"$GITHUB_OUTPUT"

      # 6Ô∏è‚É£¬†Send payload to Slack (title, body, url, mentions)
      - name: Notify Slack
        run: |
          BODY="üë• *Please review*: ${!steps.mentions.outputs.list}"
          jq -n \
            --arg title ":rocket: Develop ‚Üí Stage PR #${{ steps.pr.outputs.number }} created" \
            --arg body  "$BODY" \
            --arg url   "${{ steps.pr.outputs.url }}" \
            --arg mentions "${{ steps.mentions.outputs.list }}" \
            '{title:$title,body:$body,url:$url,mentions:$mentions}' |
          curl -s -X POST -H 'Content-Type: application/json' \
               --data @- "$SLACK_RELEASE_WORKFLOW_URL"
