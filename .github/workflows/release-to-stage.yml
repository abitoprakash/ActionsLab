name: "Create develop -> Stage PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: "Pullâ€‘request title"
        required: true
        type: string
      pr_body:
        description: "Pullâ€‘request description (optional)"
        required: false
        type: string

env:
  SLACK_RELEASE_WORKFLOW_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:                    ${{ secrets.GITHUB_TOKEN }}

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # 1Â Â Checkout repo (brings in slack-user-map.json)
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2Â Â Compose PR description (append workflow run link)
      - name: Build PR description
        id: desc
        run: |
          WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
            DESC="${{ github.event.inputs.pr_body }}\n\nâ€”\nGenerated by workflow: ${WF_URL}"
          else
            DESC="Automatically generated PR.\nWorkflow run â†’ ${WF_URL}"
          fi
          printf '%s' "$DESC" | sed -e 's/%/%25/g' -e 's/\n/%0A/g' -e 's/\r/%0D/g' \
            | awk '{print "text="$0}' >>"$GITHUB_OUTPUT"

      # 3Â Â Create PR develop â†’ stage
      - name: Open pull request
        id: pr
        run: |
          PR_URL=$(gh pr create \
                     --head develop --base stage \
                     --title "${{ github.event.inputs.pr_title }}" \
                     --body  "${{ steps.desc.outputs.text }}" | tail -n1)
          echo "url=$PR_URL" >>"$GITHUB_OUTPUT"
          echo "number=${PR_URL##*/}" >>"$GITHUB_OUTPUT"

      # 4Â Â Collect commit authors
      - name: Gather commit authors
        id: authors
        run: |
          COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
          IDS=$(jq -r '.[] | .author.login?, .commit.author.email?' <<<"$COMMITS" | grep -v null | sort -u)
          echo "all=$(echo "$IDS" | tr '\n' ',' | sed 's/,$//')" >>"$GITHUB_OUTPUT"

      # 5Â Â Map to Slack handles & request GH reviewers
      - name: Map to Slack handles and request reviewers
        id: reviewers
        run: |
          mapfile -t ARR < <(echo "${{ steps.authors.outputs.all }}" | tr ',' '\n')

          declare -a HANDLES
          declare -a GH_REVIEWERS

          for IDENT in "${ARR[@]}"; do
            [[ "$IDENT" != *"@"* ]] && GH_REVIEWERS+=("$IDENT")

            HANDLE=$(jq -r --arg k "$IDENT" '.[ $k ] // empty' .github/slack-user-map.json || true)
            if [[ -n "$HANDLE" ]]; then
              HANDLES+=("@$HANDLE")
            elif [[ "$IDENT" == *"@"* ]]; then
              HANDLES+=("@$(cut -d@ -f1 <<<"$IDENT")")
            else
              HANDLES+=("@$IDENT")
            fi
          done

          [[ ${#GH_REVIEWERS[@]} -gt 0 ]] && \
            gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$(IFS=','; echo "${GH_REVIEWERS[*]}")"

          echo "mentions=$(IFS=' '; echo "${HANDLES[*]}")" >>"$GITHUB_OUTPUT"

      # 6Â Â Send payload to Slack: title, body, url
      - name: Notify Slack
        run: |
          BODY="ðŸ‘¥ *Please review*: ${{ steps.reviewers.outputs.mentions }}"
          jq -n \
            --arg title ":rocket: Develop â†’ Stage PR #${{ steps.pr.outputs.number }} created" \
            --arg body  "$BODY" \
            --arg url   "${{ steps.pr.outputs.url }}" \
            '{title:$title,body:$body,url:$url}' |
          curl -s -X POST -H 'Content-Type: application/json' \
               --data @- "$SLACK_RELEASE_WORKFLOW_URL"
