name: "Create environment PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      direction:
        description: "Select the PR direction"
        required: true
        type: choice
        options: [develop-to-stage, stage-to-master]
      pr_title:
        description: "Pull‑request title"
        required: true
        type: string
      pr_body:
        description: "Optional PR description"
        required: false
        type: string

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_env_pr:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # 1️⃣ pick branches based on direction
    - name: Select branches
      id: branches
      run: |
        case "${{ github.event.inputs.direction }}" in
          develop-to-stage)
            echo "src=develop"  >>"$GITHUB_OUTPUT"
            echo "dst=stage"    >>"$GITHUB_OUTPUT"
            echo "label=Develop -> Stage" >>"$GITHUB_OUTPUT"
            ;;
          stage-to-master)
            echo "src=stage"    >>"$GITHUB_OUTPUT"
            echo "dst=main"     >>"$GITHUB_OUTPUT"   # adapt if your prod branch is master
            echo "label=Stage -> Master" >>"$GITHUB_OUTPUT"
            ;;
          *)
            echo "Unsupported direction"; exit 1
        esac

    # 2️⃣ compose PR description
    - name: Compose description
      id: prdesc
      run: |
        WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
          DESC="${{ github.event.inputs.pr_body }}\n\n—\nCreated via workflow run: ${WF_URL}"
        else
          DESC="Automatically created PR.\nWorkflow run → ${WF_URL}"
        fi
        { echo 'text<<EOF'; echo -e "$DESC"; echo EOF; } >>"$GITHUB_OUTPUT"

    # 3️⃣ create PR
    - name: Create PR
      id: pr
      run: |
        PR_URL=$(gh pr create \
                   --head "${{ steps.branches.outputs.src }}" \
                   --base "${{ steps.branches.outputs.dst }}" \
                   --title "${{ github.event.inputs.pr_title }}" \
                   --body  "${{ steps.prdesc.outputs.text }}" | tail -n1)
        echo "url=$PR_URL"          >>"$GITHUB_OUTPUT"
        echo "number=${PR_URL##*/}" >>"$GITHUB_OUTPUT"

    # 4️⃣ add valid commit authors as reviewers
    - name: Add reviewers
      run: |
        COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
        LOGINS=$(jq -r '.[] | .author.login' <<<"$COMMITS" |
                 grep -v -E '(^github-actions\[bot\]$|^$)' | sort -u | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$LOGINS" ]]; then
          # attempt; don’t fail job if any handle is invalid
          gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$LOGINS" || true
        fi

    # 5️⃣ resolve actor identity (email or login)
    - name: Resolve actor
      id: actor
      run: |
        EMAIL=$(gh api users/${{ github.actor }} --jq '.email' 2>/dev/null || echo "")
        [[ -z "$EMAIL" || "$EMAIL" == "null" ]] && EMAIL="${{ github.actor }}"
        echo "name=$EMAIL" >>"$GITHUB_OUTPUT"

    # 6️⃣ post Slack message
    - name: Notify Slack
      run: |
        title="${{ steps.branches.outputs.label }} PR #${{ steps.pr.outputs.number }} created"
        body="PR link: ${{ steps.pr.outputs.url }}"
        actor="${{ steps.actor.outputs.name }}"

        jq -n \
          --arg title "$title" \
          --arg body  "$body" \
          --arg actor "$actor" \
          '{title:$title,body:$body,actor:$actor}' |
        curl -s -X POST -H 'Content-Type: application/json' --data @- "$SLACK_WEBHOOK_URL"
