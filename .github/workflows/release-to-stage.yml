name: "Create develop -> Stage PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: "Pullâ€‘request title"
        required: true
        type: string
      pr_body:
        description: "Pullâ€‘request description (optional)"
        required: false
        type: string

env:
  SLACK_RELEASE_WORKFLOW_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:                    ${{ secrets.GITHUB_TOKEN }}

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # 1Â Â Checkout repo (includes slack-user-map.json)
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2Â Â Compose PR description
      - name: Build PR description
        id: desc
        run: |
          wf_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}}"
          if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
            body="${{ github.event.inputs.pr_body }}\n\nâ€”\nGenerated by workflow: ${wf_url}"
          else
            body="Automatically generated PR.\nWorkflow run â†’ ${wf_url}"
          fi
          # Escaping for multiâ€‘line bash output
          echo "text<<EOF" >>"$GITHUB_OUTPUT"
          echo -e "$body"   >>"$GITHUB_OUTPUT"
          echo "EOF"        >>"$GITHUB_OUTPUT"

      # 3Â Â Open the PR (develop â†’ stage) and capture URL / number
      - name: Open pull request
        id: pr
        run: |
          result=$(gh pr create \
                     --head develop --base stage \
                     --title "${{ github.event.inputs.pr_title }}" \
                     --body  "${{ steps.desc.outputs.text }}" \
                     --json url,number)
          echo "$result" | jq .
          echo "url=$(jq -r .url    <<<"$result")"   >>"$GITHUB_OUTPUT"
          echo "number=$(jq -r .number <<<"$result")" >>"$GITHUB_OUTPUT"

      # 4Â Â Collect commit authors
      - name: Gather commit authors
        id: authors
        run: |
          commits=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
          ids=$(jq -r '.[] | .author.login?, .commit.author.email?' <<<"$commits" | grep -v null | sort -u)
          echo "all=$(echo "$ids" | tr '\n' ',' | sed 's/,$//')" >>"$GITHUB_OUTPUT"

      # 5Â Â Map to Slack mentions + request GitHub reviewers
      - name: Map & request reviewers
        id: mentions
        run: |
          mapfile -t ids < <(echo "${{ steps.authors.outputs.all }}" | tr ',' '\n')

          declare -a mentions
          declare -a gh_logins

          for id in "${ids[@]}"; do
            if [[ "$id" != *"@"* ]]; then    # GitHub login
              gh_logins+=("$id")
            fi
            slack=$(jq -r --arg k "$id" '.[ $k ] // empty' .github/slack-user-map.json || true)
            if [[ -n "$slack" ]]; then
              mentions+=("<@$slack>")
            elif [[ "$id" == *"@"* ]]; then
              mentions+=("$(cut -d@ -f1 <<<"$id")")
            else
              mentions+=("$id")
            fi
          done

          if [[ ${#gh_logins[@]} -gt 0 ]]; then
            gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$(IFS=','; echo "${gh_logins[*]}")"
          fi

          echo "list=$(IFS=' '; echo "${mentions[*]}")" >>"$GITHUB_OUTPUT"

      # 6Â Â Send Slack message (title & body only)
      - name: Notify Slack
        run: |
          pr_link="<${{ steps.pr.outputs.url }}|Open PR>"
          body="ðŸ‘¥ *Please review*: ${{ steps.mentions.outputs.list }}\n${pr_link}"
          jq -n \
            --arg title ":rocket: Develop â†’ Stage PR #${{ steps.pr.outputs.number }} created" \
            --arg body  "$body" \
            '{title:$title,body:$body}' |
          curl -s -X POST -H 'Content-Type: application/json' \
               --data @- "$SLACK_RELEASE_WORKFLOW_URL"
