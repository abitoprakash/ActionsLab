name: "Create develop → stage PR"

on:
  # QA triggers it from the Actions tab
  workflow_dispatch:
    inputs:
      pr_title:
        description: "PR title (required)"
        required: true
        type: string
      pr_body:
        description: "PR body / Confluence link (optional)"
        required: false
        type: string

env:
  # Add this secret under Repo → Settings → Secrets → Actions
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}

jobs:
  open-pr:
    runs-on: ubuntu-latest

    steps:
      # 1. check out so `gh` can diff the two branches
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. create the PR (develop → stage)
      - name: Create PR
        id: pr
        run: |
          pr_json=$(gh pr create \
              --head develop \
              --base stage \
              --title "${{ github.event.inputs.pr_title }}" \
              --body  "${{ github.event.inputs.pr_body }}" \
              --json  number,url)
          echo "number=$(jq -r .number <<<"$pr_json")" >>"$GITHUB_OUTPUT"
          echo "url=$(jq -r .url    <<<"$pr_json")" >>"$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # auto‑generated

      # 3. work out who committed to the PR and add them as reviewers
      - name: Collect commit authors
        id: mentions
        run: |
          mapfile -t authors < <(
            gh pr view "${{ steps.pr.outputs.number }}" --json commits |
            jq -r '.commits[].author.login' | sort -u )
          csv=$(IFS=','; echo "${authors[*]}")
          echo "list=$csv" >>"$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add reviewers
        if: steps.mentions.outputs.list != ''
        run: |
          gh pr edit "${{ steps.pr.outputs.number }}" \
               --add-reviewer "${{ steps.mentions.outputs.list }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. fire the generic Slack Workflow Builder webhook
      - name: Notify Slack
        run: |
          payload=$(jq -n \
            --arg event    "pr_created" \
            --arg title    "${{ github.event.inputs.pr_title }}" \
            --arg url      "${{ steps.pr.outputs.url }}" \
            --arg body     "${{ github.event.inputs.pr_body }}" \
            --arg mentions "${{ steps.mentions.outputs.list }}" \
            '{event:$event,body:$body,title:$title,mentions:$mentions,url:$url}')
          curl -X POST -H 'Content-Type: application/json' \
               -d "$payload" "$SLACK_WEBHOOK_URL"
