name: "Create environment PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      direction:
        description: "Select the PR direction"
        required: true
        type: choice
        options: [develop-to-stage, stage-to-master]
      pr_title:
        description: "Pull‑request title"
        required: true
        type: string
      pr_body:
        description: "Optional PR description"
        required: false
        type: string

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_env_pr:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    # 1️⃣  Set branch vars from direction
    - name: Select branches
      id: branches
      run: |
        case "${{ github.event.inputs.direction }}" in
          develop-to-stage)
            echo "src=develop"  >>"$GITHUB_OUTPUT"
            echo "dst=stage"    >>"$GITHUB_OUTPUT"
            echo "label=Develop -> Stage" >>"$GITHUB_OUTPUT"
            ;;
          stage-to-master)
            echo "src=stage"    >>"$GITHUB_OUTPUT"
            echo "dst=master"   >>"$GITHUB_OUTPUT"   # prod branch is master
            echo "label=Stage -> Master" >>"$GITHUB_OUTPUT"
            ;;
          *)
            echo "Unsupported direction"; exit 1
        esac

    # 2️⃣  Craft PR description
    - name: Compose description
      id: prdesc
      run: |
        WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
          DESC="${{ github.event.inputs.pr_body }}\n\n—\nCreated via workflow run: ${WF_URL}"
        else
          DESC="Automatically created PR.\nWorkflow run → ${WF_URL}"
        fi
        { echo 'text<<EOF'; echo -e "$DESC"; echo EOF; } >>"$GITHUB_OUTPUT"

    # 3️⃣  Create PR or reuse existing one
    - name: Create or reuse PR
      id: pr
      run: |
        set +e
        OUTPUT=$(gh pr create \
                    --head "${{ steps.branches.outputs.src }}" \
                    --base "${{ steps.branches.outputs.dst }}" \
                    --title "${{ github.event.inputs.pr_title }}" \
                    --body  "${{ steps.prdesc.outputs.text }}" 2>&1)
        STATUS=$?
        set -e

        if [[ $STATUS -eq 0 ]]; then
          PR_URL="$OUTPUT"
        else
          echo "gh pr create returned non‑zero (possibly already exists). Output:"
          echo "$OUTPUT"
          # Try to grab URL from stdout/stderr
          PR_URL=$(echo "$OUTPUT" | grep -o 'https://[^\ ]*pull/[0-9]*' | head -n1)
          if [[ -z "$PR_URL" ]]; then
            echo "Falling back to gh pr list…"
            PR_URL=$(gh pr list --state open \
                       --base "${{ steps.branches.outputs.dst }}" \
                       --head "${{ steps.branches.outputs.src }}" \
                       --json url --jq '.[0].url' || true)
          fi
          if [[ -z "$PR_URL" ]]; then
            echo "Could not determine existing PR URL"; exit 1
          fi
        fi

        PR_NUM="${PR_URL##*/}"
        echo "url=$PR_URL"      >>"$GITHUB_OUTPUT"
        echo "number=$PR_NUM"   >>"$GITHUB_OUTPUT"

    # 4️⃣  Add valid commit authors as reviewers (skip bots)
    - name: Add reviewers
      run: |
        COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
        LOGINS=$(jq -r '.[] | .author.login' <<<"$COMMITS" |
                 grep -v -E '(^github-actions\[bot\]$|^$)' |
                 sort -u | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$LOGINS" ]]; then
          gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$LOGINS" || true
        fi

    # 5️⃣  Determine actor identity
    - name: Resolve actor
      id: actor
      run: |
        EMAIL=$(gh api users/${{ github.actor }} --jq '.email' 2>/dev/null || echo "")
        [[ -z "$EMAIL" || "$EMAIL" == "null" ]] && EMAIL="${{ github.actor }}"
        echo "name=$EMAIL" >>"$GITHUB_OUTPUT"

    # 6️⃣  Notify Slack (plain text only)
    - name: Notify Slack
      run: |
        title="${{ steps.branches.outputs.label }} PR #${{ steps.pr.outputs.number }} created"
        body="PR link: ${{ steps.pr.outputs.url }}"
        actor="${{ steps.actor.outputs.name }}"

        jq -n \
          --arg title "$title" \
          --arg body  "$body" \
          --arg actor "$actor" \
          '{title:$title,body:$body,actor:$actor}' |
        curl -s -X POST -H 'Content-Type: application/json' \
             --data @- "$SLACK_WEBHOOK_URL"
