name: "Create develop -> Stage PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: "Pull‚Äërequest title"
        required: true
        type: string
      pr_body:
        description: "Pull‚Äërequest description (optional)"
        required: false
        type: string

env:
  SLACK_RELEASE_WORKFLOW_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:                    ${{ secrets.GITHUB_TOKEN }}

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£  Checkout repo (includes slack-user-map.json)
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # 2Ô∏è‚É£  Create the PR (develop ‚Üí stage) and capture URL / number
      - name: Open pull request
        id: pr
        run: |
          set -euo pipefail

          WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}}"

          if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
            PR_TEXT=$(printf "%s\n\n‚Äî\nGenerated by workflow: %s" \
                       "${{ github.event.inputs.pr_body }}" "$WF_URL")
          else
            PR_TEXT=$(printf "Automatically generated PR.\nWorkflow run ‚Üí %s" "$WF_URL")
          fi

          # gh outputs the PR URL on the last line
          PR_URL=$(gh pr create \
                     --head develop --base stage \
                     --title "${{ github.event.inputs.pr_title }}" \
                     --body  "$PR_TEXT" | tail -n1)

          echo "url=$PR_URL"      >>"$GITHUB_OUTPUT"
          echo "number=${PR_URL##*/}" >>"$GITHUB_OUTPUT"

      # 3Ô∏è‚É£  Collect commit authors
      - name: Gather commit authors
        id: authors
        run: |
          COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
          IDS=$(jq -r '.[] | .author.login?, .commit.author.email?' <<<"$COMMITS" | grep -v null | sort -u)
          echo "all=$(echo "$IDS" | tr '\n' ',' | sed 's/,$//')" >>"$GITHUB_OUTPUT"

      # 4Ô∏è‚É£  Map to Slack mentions + request reviewers
      - name: Map to Slack mentions & request reviewers
        id: mentions
        run: |
          mapfile -t IDS < <(echo "${{ steps.authors.outputs.all }}" | tr ',' '\n')

          declare -a MENTIONS
          declare -a GH_REVIEWERS

          for ID in "${IDS[@]}"; do
            [[ "$ID" != *"@"* ]] && GH_REVIEWERS+=("$ID")

            SLACK_ID=$(jq -r --arg k "$ID" '.[ $k ] // empty' .github/slack-user-map.json || true)

            if [[ -n "$SLACK_ID" ]]; then
              MENTIONS+=("<@$SLACK_ID>")
            elif [[ "$ID" == *"@"* ]]; then
              MENTIONS+=("$(cut -d@ -f1 <<<"$ID")")
            else
              MENTIONS+=("$ID")
            fi
          done

          if [[ ${#GH_REVIEWERS[@]} -gt 0 ]]; then
            gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$(IFS=','; echo "${GH_REVIEWERS[*]}")"
          fi

          echo "list=$(IFS=' '; echo "${MENTIONS[*]}")" >>"$GITHUB_OUTPUT"

      # 5Ô∏è‚É£  Post to Slack (title & body only)
      - name: Notify Slack
        run: |
          BODY=$(printf "üë• *Please review*: %s\n<%s|Open PR>" \
                        "${{ steps.mentions.outputs.list }}" \
                        "${{ steps.pr.outputs.url }}")

          jq -n \
            --arg title ":rocket: Develop ‚Üí Stage PR #${{ steps.pr.outputs.number }} created" \
            --arg body  "$BODY" \
            '{title:$title,body:$body}' |
          curl -s -X POST -H 'Content-Type: application/json' \
               --data @- "$SLACK_RELEASE_WORKFLOW_URL"
