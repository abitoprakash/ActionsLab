name: "Create develop -> Stage PR"

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: "Pull‚Äërequest title"
        required: true
        type: string
      pr_body:
        description: "Optional PR description (appears in GitHub)"
        required: false
        type: string

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WORKFLOW_URL }}
  GH_TOKEN:          ${{ secrets.GITHUB_TOKEN }}

jobs:
  create_dev_stage_pr:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£  Checkout repo
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2Ô∏è‚É£  Build PR description, append workflow‚Äërun link
    - name: Compose PR description
      id: prdesc
      shell: bash
      run: |
        WF_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        if [[ -n "${{ github.event.inputs.pr_body }}" ]]; then
          DESC="${{ github.event.inputs.pr_body }}\n\n‚Äî\nCreated via workflow run: ${WF_URL}"
        else
          DESC="Automatically created PR.\nWorkflow run ‚Üí ${WF_URL}"
        fi
        {
          echo 'text<<EOF'
          echo -e "$DESC"
          echo EOF
        } >>"$GITHUB_OUTPUT"

    # 3Ô∏è‚É£  Create the PR develop ‚Üí stage, capture URL & number
    - name: Create PR
      id: pr
      shell: bash
      run: |
        PR_URL=$(gh pr create \
                   --head develop \
                   --base stage  \
                   --title "${{ github.event.inputs.pr_title }}" \
                   --body  "${{ steps.prdesc.outputs.text }}" | tail -n1)
        echo "url=$PR_URL"        >>"$GITHUB_OUTPUT"
        echo "number=${PR_URL##*/}" >>"$GITHUB_OUTPUT"

    # 4Ô∏è‚É£  Add commit authors as reviewers
    - name: Add reviewers
      shell: bash
      run: |
        COMMITS=$(gh api repos/${{ github.repository }}/pulls/${{ steps.pr.outputs.number }}/commits)
        LOGINS=$(jq -r '.[] | .author.login' <<<"$COMMITS" | grep -v null | sort -u | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$LOGINS" ]]; then
          gh pr edit ${{ steps.pr.outputs.number }} --add-reviewer "$LOGINS"
        fi

    # 5Ô∏è‚É£  Get e‚Äëmail (or fallback login) for the actor
    - name: Resolve actor e‚Äëmail
      id: actor
      shell: bash
      run: |
        ACTOR="${{ github.actor }}"
        EMAIL=$(gh api users/"$ACTOR" --jq '.email' 2>/dev/null || echo "")
        if [[ -z "$EMAIL" || "$EMAIL" == "null" ]]; then
          EMAIL="$ACTOR"   # fallback to login
        fi
        echo "email=$EMAIL" >>"$GITHUB_OUTPUT"

    # 6Ô∏è‚É£  Notify Slack (title, body, actor)
    - name: Notify Slack
      shell: bash
      run: |
        title="üöÄ Develop ‚Üí Stage PR #${{ steps.pr.outputs.number }} created"
        body="PR link: ${{ steps.pr.outputs.url }}"
        actor="${{ steps.actor.outputs.email }}"

        jq -n \
          --arg title "$title" \
          --arg body  "$body" \
          --arg actor "$actor" \
          '{title:$title,body:$body,actor:$actor}' |
        curl -s -X POST -H 'Content-Type: application/json' \
             --data @- "$SLACK_WEBHOOK_URL"
